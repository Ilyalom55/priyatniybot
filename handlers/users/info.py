import random

from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,ContentType

from handlers.users.eat_choice import eat_list, drinks
from keyboards.inline.choice_buttons import info, info_keyboard, all_categories, go_to_videos, eat, end, after_pregnant_16
from handlers.users.videos_links import men_women, pregnant_16
from loader import dp, bot

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State


@dp.message_handler(Command("start"))
async def cmd_start(message: Message):
    await bot.send_animation(message.from_user.id, r'https://media.tenor.com/9gNWL-w1CiQAAAAC/–∏—ç—Ç–æ–Ω–µ—à—É—Ç–∫–∞-its-not-a-joke.gif', caption="–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –º–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π –¥—Ä—É–≥, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üíó –ù–∞–∂–º–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—åüëá", reply_markup=info)
    await message.delete()

@dp.message_handler()
async def echo(message:Message):
    await bot.send_animation(message.from_user.id,r'https://media.tenor.com/y7ym4Yrdm98AAAAC/–∫—Ä–∏—á–∞—Ç—å-–æ–±–æ–∂–µ.gif',caption="–Ø –Ω–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –Ω–æ –ª—É—á—à–µ –ø–æ—Ç—ã–∫–∞–π –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–ºüôÉ", reply_markup=info)


@dp.message_handler(content_types=ContentType.STICKER)
async def handle_sticker(message:Message):
    await bot.send_animation(message.from_user.id,r'https://media.tenor.com/AN9twiCPQg8AAAAC/–æ–≥–æ–æ–≥–æ-oh-oh.gif', caption="–ë–æ–º–±–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä, –¥—Ä—É–∂–∏—â–µü´°\n –ù–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ—â–µ)", reply_markup=info)





@dp.callback_query_handler(lambda c: c.data == 'about_me')
async def showing_info(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer("–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –ø–æ–±–æ–ª—å—à–µ. –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏ –∏ —Å–∞–π—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–µ—Ä—á–µ–º üòé",
                              reply_markup=info_keyboard)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'sticker')
async def process_callback_button3(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_sticker(callback_query.from_user.id, sticker="CAACAgIAAxkBAAEK22llaHpdvTTRqFRdI-niaEotEgMV7QACGToAAoj-MUs6HBvpS7CmzzME")
    await bot.send_message(callback_query.from_user.id, text="–ó–∞–±–∏—Ä–∞–π –º–æ–π –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üëâ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—èü´∂", reply_markup=do_back())
    await callback_query.message.delete()
def do_back():
    back_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—èüîô", callback_data="back"))
    return back_button


@dp.callback_query_handler(lambda c: c.data == 'back')
async def call_back(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?", reply_markup=info)
    await call.message.delete()



@dp.callback_query_handler(lambda c: c.data == 'go_back')
async def back_to_mess(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?", reply_markup=info)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'video')
async def go_to_video(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–ñ–º—è–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏üëá, –Ω—É –∞ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–ºü§ó ", reply_markup=go_to_videos)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'categories')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!", reply_markup=all_categories)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'back_to_choice')
async def back_to_mess(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!", reply_markup=go_to_videos)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'men_women')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    link = random.choice(men_women)
    await bot.send_message(call.from_user.id, f"–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú—É–∂—Å–∫–æ–µ/–ñ–µ–Ω—Å–∫–æ–µüë´ \n {link}", reply_markup=eat)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'back_2')
async def back_to_mess(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!", reply_markup=all_categories)



@dp.callback_query_handler(lambda c: c.data == 'pregnant_16')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    link = random.choice(pregnant_16)
    await bot.send_message(call.from_user.id, f"–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞ –≤ 16ü§∞ \n {link}" , reply_markup=after_pregnant_16)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'married')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –î–∞–≤–∞–π –ø–æ–∂–µ–Ω–∏–º—Å—èüíç \n https://youtu.be/hsoS-9wPlSY?si=2m_-PF8ouDJOwVrc", reply_markup=eat)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'lets_speak')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—É—Å—Ç—å –≥–æ–≤–æ—Ä—è—Çüó£ \n https://youtu.be/s1tBO6l7szA?si=tuXNxkDEnCuqrG4a"  , reply_markup=eat)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'pacanki')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–∞—Ü–∞–Ω–∫–∏ü§∑ \n https://youtu.be/hhJQMSRZtSY?si=mHe57RwKG88-HGoO"  , reply_markup=eat)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'betray')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–õ–æ–≤–∏ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–∑–º–µ–Ω—ãüíÅ‚Äç‚ôÇÔ∏è \n https://youtu.be/lN-94Z0tEZg?si=EL0GY1Vw8clzEu2E"  , reply_markup=eat)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'eat_choice')
async def go_to_categories(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    to_eat = random.choice(eat_list)
    to_drink = random.choice(drinks)
    await bot.send_animation(call.from_user.id, r'https://media.tenor.com/e7fGXwHc3G8AAAAC/—á—ë—Ç–æ–∂—Ä–∞—Ç—å–∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å-–ø—Ä–∏—è—Ç–Ω—ã–π–∏–ª—å–¥–∞—Ä.gif', caption=f"–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∑—è—Ç—å {to_eat} –Ω–∞ –ø–æ—Ö—Ä—É–º–∫–∞—Ç—åüçΩ –∏ {to_drink}üçπ", reply_markup=end)


@dp.callback_query_handler(lambda c: c.data == 'back_to_categories')
async def back_to_mess(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!", reply_markup=all_categories)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'back_to_info')
async def back_to_mess(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?", reply_markup=info)
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'more')
async def more(call:CallbackQuery):
    new_link = random.choice(men_women)
    await bot.send_message(call.from_user.id, f"–õ–æ–≤–∏ –µ—â–µ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú—É–∂—Å–∫–æ–µ/–ñ–µ–Ω—Å–∫–æ–µüë´ \n {new_link}", reply_markup=eat)


@dp.callback_query_handler(lambda c: c.data == 'more_2')
async def more2(call:CallbackQuery):
    if pregnant_16:
        new_link_16 = random.choice(pregnant_16)
        pregnant_16.remove(new_link_16)
        await bot.send_message(call.from_user.id, f"–õ–æ–≤–∏ –µ—â–µ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞ –≤ 16ü§∞  \n {new_link_16}",
                               reply_markup=after_pregnant_16)
    else:
        await bot.send_animation(call.from_user.id, r'https://media.tenor.com/oDOxbExCNqQAAAAC/—Å–∫–∞–∂—É—á–µ—Å—Ç–Ω–æ-i-will-be-honest.gif',caption="–°–æ—Ä—Ä–∏, –Ω–æ —ç—Ç–æ –≤—Å–µ, —á–µ–º —è —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üò∂‚Äçüå´Ô∏è",
                               reply_markup=end)

@dp.callback_query_handler(lambda c: c.data == 'prediction')
async def send_prediction(callback_query: CallbackQuery):
    predictions = ["–ö—Ä–∞—Å–∏–≤—ã–π, —É–º–Ω—ã–π –∏ –ª—é–±—è—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤–æ–π–¥–µ—Ç –≤ –≤–∞—à—É –∂–∏–∑–Ω—å.", "–í–∞—à–∞ –∂–∏–∑–Ω—å –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∏ –º–∏—Ä–Ω–æ–π.", "–•–æ—Ä–æ—à–∏–µ –≤–µ—â–∏ –ø—Ä–∏–¥—É—Ç –∫ –≤–∞–º."]
    prediction = random.choice(predictions)
    await bot.send_message(callback_query.from_user.id, prediction, reply_markup=do_back())
def do_back():
    back_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—èüîô", callback_data="back"))
    return back_button




